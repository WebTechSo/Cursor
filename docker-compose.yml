version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: vehicle-tracking-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: vehicle_tracking
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - vehicle-tracking-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: vehicle-tracking-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - vehicle-tracking-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: vehicle-tracking-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/vehicle_tracking?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      JWT_REFRESH_SECRET: dev-refresh-secret-change-in-production
      CORS_ORIGIN: http://localhost:3001,http://localhost:3002
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - vehicle-tracking-network

  # Web Admin Interface
  web-admin:
    build:
      context: ./web-admin
      dockerfile: Dockerfile.dev
    container_name: vehicle-tracking-web-admin
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      REACT_APP_API_URL: http://localhost:3000/api/v1
      REACT_APP_SOCKET_URL: http://localhost:3000
      REACT_APP_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
    volumes:
      - ./web-admin:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - vehicle-tracking-network

  # Mobile App (React Native Web for development)
  mobile-app:
    build:
      context: ./mobile-app
      dockerfile: Dockerfile.dev
    container_name: vehicle-tracking-mobile-app
    restart: unless-stopped
    ports:
      - "3002:3000"
      - "19000:19000"  # Expo Metro bundler
      - "19001:19001"  # Expo dev server
    environment:
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
      REACT_NATIVE_PACKAGER_HOSTNAME: localhost
    volumes:
      - ./mobile-app:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - vehicle-tracking-network

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: vehicle-tracking-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - web-admin
    networks:
      - vehicle-tracking-network
    profiles:
      - production

  # Device Simulator (for testing GPS tracking)
  device-simulator:
    build:
      context: ./docker/device-simulator
      dockerfile: Dockerfile
    container_name: vehicle-tracking-device-simulator
    restart: unless-stopped
    environment:
      BACKEND_URL: http://backend:3000
      SIMULATION_VEHICLES: 5
      UPDATE_INTERVAL: 10
    depends_on:
      - backend
    networks:
      - vehicle-tracking-network
    profiles:
      - testing

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  vehicle-tracking-network:
    driver: bridge